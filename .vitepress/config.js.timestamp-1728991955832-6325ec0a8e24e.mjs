// .vitepress/config.js
import AutoSidebar from "file:///home/zerlei/git/me/node_modules/vite-plugin-vitepress-auto-sidebar/dist/index.mjs";

// .vitepress/utils.js
import { globby } from "file:///home/zerlei/git/me/node_modules/globby/index.js";
import matter from "file:///home/zerlei/git/me/node_modules/gray-matter/index.js";
import fs from "file:///home/zerlei/git/me/node_modules/fs-extra/lib/index.js";

// .vitepress/filesTime.json
var filesTime_default = [["about.md", "2023-10-27 23:30:00 ", "2023-12-17 15:12:38 "], ["blog.md", "2024-08-15 22:52:01 ", "2024-08-15 22:52:01 "], ["docs/life/TheEnd.md", "2024-08-27 13:52:02 ", "2024-08-27 13:52:02 "], ["docs/life/\u4FEE\u884C_ca/0-\u4FEE\u884C.md", "2024-05-06 20:44:06 ", "2024-09-13 14:00:49 "], ["docs/life/\u4FEE\u884C_ca/\u4E24\u4EEA\u5BA5.md", "2023-11-07 13:46:38 ", "2024-09-13 14:00:49 "], ["docs/life/\u4FEE\u884C_ca/\u4ED9\u4E50\u5E9C-\u5929\u5730\u5BD3.md", "2024-09-12 10:52:36 ", "2024-09-13 14:00:49 "], ["docs/life/\u4FEE\u884C_ca/\u60CA\u5D16\u949F.md", "2023-11-07 13:46:38 ", "2024-06-05 22:49:40 "], ["docs/life/\u4FEE\u884C_ca/\u62D6\u8089\u884C.md", "2024-06-05 22:49:40 ", "2024-06-05 22:49:40 "], ["docs/life/\u4FEE\u884C_ca/\u795E\u601D\u6D77.md", "2023-11-07 13:46:38 ", "2024-09-12 13:25:42 "], ["docs/life/\u4FEE\u884C_ca/\u8715\u51E1\u58F3.md", "2023-11-09 09:29:45 ", "2024-08-22 10:18:36 "], ["docs/life/\u4FEE\u884C_ca/\u8715\u51E1\u58F3/-1-\u826F\u597D\u7684\u7761\u7720.md", "2024-09-12 10:52:36 ", "2024-09-12 10:52:36 "], ["docs/life/\u4FEE\u884C_ca/\u8715\u51E1\u58F3/0-\u5E38\u770B\u4FEE\u884C\u7684\u5185\u5BB9.md", "2024-08-22 10:18:36 ", "2024-08-22 10:18:36 "], ["docs/life/\u4FEE\u884C_ca/\u8715\u51E1\u58F3/1-\u4E0D\u8981\u5728\u53D1\u5446\u4E2D\u5F85\u592A\u957F\u65F6\u95F4.md", "2024-08-30 09:16:42 ", "2024-09-12 10:52:36 "], ["docs/life/\u4FEE\u884C_ca/\u8715\u51E1\u58F3/2-\u62C9\u5C4E\u7684\u65F6\u5019\u4E0D\u8981\u73A9\u624B\u673A.md", "2024-08-30 09:16:42 ", "2024-08-30 09:16:42 "], ["docs/life/\u4FEE\u884C_ca/\u8715\u51E1\u58F3/3-\u51CF\u5C11\u5728\u4F4E\u8D28\u91CFapp\u6D6A\u8D39\u7684\u65F6\u95F4.md", "2024-09-12 10:52:36 ", "2024-09-12 10:52:36 "], ["docs/life/\u4FEE\u884C_ca/\u8715\u51E1\u58F3/4-\u4FDD\u6301\u751F\u6D3B\u73AF\u5883\u7684\u5E72\u51C0\u6574\u6D01.md", "2024-09-12 10:52:36 ", "2024-09-12 10:52:36 "], ["docs/life/\u5065\u5EB7/\u51CF\u5C11\u9AD8\u8840\u8102\u548C\u8102\u80AA\u809D.md", "2023-11-07 13:46:38 ", "2024-02-18 08:44:26 "], ["docs/life/\u5065\u5EB7/\u7528\u6700\u8BA4\u771F\u7684\u6001\u5EA6\u5BF9\u5F85\u5065\u5EB7.md", "2023-11-07 13:46:38 ", "2024-02-18 08:44:26 "], ["docs/life/\u5065\u5EB7/\u9AD8\u8D28\u91CF\u751F\u6D3B\u5C0F\u8D34\u58EB.md", "2023-11-07 13:46:38 ", "2024-02-18 08:44:26 "], ["docs/life/\u5B9E\u8DF5/\u884C\u52A8/\u4E0D\u8981\u8BA9\u81EA\u5DF1\u5904\u5728\u4E00\u4E2A\u6F2B\u957F\u7684\u65E0\u53CD\u9988\u7684\u89C4\u5212\u4E2D.md", "2024-07-03 22:51:21 ", "2024-07-03 22:51:21 "], ["docs/life/\u5B9E\u8DF5/\u884C\u52A8/\u6253\u9020\u4E2A\u4EBA\u54C1\u724C.md", "2023-11-07 13:46:38 ", "2024-02-18 08:44:26 "], ["docs/life/\u5B9E\u8DF5/\u884C\u52A8/\u65F6\u95F4\u548C\u7CBE\u529B\u5B89\u6392(Now-v1).md", "2023-11-12 21:47:49 ", "2024-02-18 08:44:26 "], ["docs/life/\u5B9E\u8DF5/\u884C\u52A8/\u7ECF\u9A8C\u548C\u65B9\u6CD5/\u7761\u7720\u9020\u6210\u4F4E\u6548\u7684\u95EE\u9898.md", "2024-03-06 14:28:05 ", "2024-03-06 14:28:05 "], ["docs/life/\u5B9E\u8DF5/\u884C\u52A8/\u7ECF\u9A8C\u548C\u65B9\u6CD5/\u91CD\u590D\u662F\u5B8C\u5168\u5FC5\u8981\u7684.md", "2024-02-18 08:44:26 ", "2024-02-18 08:44:26 "], ["docs/log_ca/2023\u5E7411\u670810\u65E5.md", "2023-11-10 22:15:26 ", "2024-05-06 23:55:38 "], ["docs/log_ca/2023\u5E7411\u67089\u65E5.md", "2023-11-09 16:23:51 ", "2023-11-10 22:15:26 "], ["docs/log_ca/2024\u5E741\u670817\u65E5.md", "2024-01-24 15:55:42 ", "2024-02-05 17:08:20 "], ["docs/log_ca/2024\u5E741\u67081\u65E5(\u6D4B\u8BD5\u753B\u56FE).md", "2024-01-01 13:41:18 ", "2024-07-17 12:55:49 "], ["docs/log_ca/2024\u5E742\u67085\u65E5.md", "2024-02-05 17:08:20 ", "2024-02-06 17:14:53 "], ["docs/log_ca/2024\u5E746\u670811\u65E5.md", "2024-06-11 13:08:50 ", "2024-06-11 13:08:50 "], ["docs/log_ca/2024\u5E746\u670822\u65E5.md", "2024-06-22 23:23:27 ", "2024-06-22 23:23:27 "], ["docs/log_ca/2024\u5E746\u670824\u65E5.md", "2024-06-24 21:45:11 ", "2024-06-24 21:45:11 "], ["docs/log_ca/2024\u5E747\u670818\u65E5(\u6211\u7684\u7126\u8651).md", "2024-07-19 11:23:23 ", "2024-08-27 14:45:38 "], ["docs/log_ca/2024\u5E747\u67089\u65E5.md", "2024-07-10 08:18:21 ", "2024-07-10 08:18:21 "], ["docs/log_ca/Plan.md", "2023-12-12 11:16:28 ", "2023-12-23 15:02:55 "], ["docs/log_ca/\u524D\u8DEF-\u5206\u6790\u4E0E\u6289\u62E9.md", "2024-07-17 00:03:07 ", "2024-08-30 09:16:42 "], ["docs/tech/DesignaPattern_ca/0-\u8BBE\u8BA1\u6A21\u5F0F-\u5E8F.md", "2024-08-30 09:16:42 ", "2024-08-30 09:16:42 "], ["docs/tech/DesignaPattern_ca/1-7\u5927\u8BBE\u8BA1\u539F\u5219.md", "2024-06-05 22:49:40 ", "2024-08-30 09:16:42 "], ["docs/tech/DesignaPattern_ca/2-\u521B\u5EFA\u578B\u6A21\u5F0F.md", "2024-06-05 22:49:40 ", "2024-08-30 09:16:42 "], ["docs/tech/DesignaPattern_ca/3-\u7ED3\u6784\u578B\u6A21\u5F0F.md", "2024-06-24 21:45:11 ", "2024-08-30 09:16:42 "], ["docs/tech/DesignaPattern_ca/4-\u884C\u4E3A\u6A21\u5F0F.md", "2024-06-26 22:23:27 ", "2024-08-30 09:16:42 "], ["docs/tech/OOAna&Design_ca/0-\u9762\u5411\u5BF9\u8C61\u4E0E\u8BBE\u8BA1\u603B\u7ED3\u7B14\u8BB0.md", "2024-03-28 16:25:58 ", "2024-07-03 22:57:59 "], ["docs/tech/OOAna&Design_ca/1-\u6982\u5FF5-\u590D\u6742\u6027.md", "2023-12-12 11:16:28 ", "2024-03-07 10:35:27 "], ["docs/tech/OOAna&Design_ca/2-\u6982\u5FF5-\u5BF9\u8C61\u6A21\u578B.md", "2023-12-12 11:16:28 ", "2024-08-30 09:16:42 "], ["docs/tech/OOAna&Design_ca/3-\u6982\u5FF5-\u7C7B\u4E0E\u5BF9\u8C61.md", "2023-12-23 15:02:55 ", "2024-03-07 10:35:27 "], ["docs/tech/OOAna&Design_ca/4-\u6982\u5FF5-\u5206\u7C7B.md", "2024-01-03 08:55:05 ", "2024-01-03 08:55:05 "], ["docs/tech/OOAna&Design_ca/5-UML/0.\u524D\u8A00.md", "2024-01-24 15:55:42 ", "2024-03-26 17:46:22 "], ["docs/tech/OOAna&Design_ca/5-UML/1.\u5305\u56FE.md", "2024-02-06 17:14:53 ", "2024-02-06 17:14:53 "], ["docs/tech/OOAna&Design_ca/5-UML/2.\u7EC4\u4EF6\u56FE.md", "2024-01-24 15:55:42 ", "2024-03-26 17:46:22 "], ["docs/tech/OOAna&Design_ca/5-UML/3.\u90E8\u7F72\u56FE.md", "2024-02-06 17:14:53 ", "2024-03-26 17:46:22 "], ["docs/tech/OOAna&Design_ca/5-UML/4.\u7528\u4F8B\u56FE.md", "2024-02-29 18:30:17 ", "2024-02-29 18:30:17 "], ["docs/tech/OOAna&Design_ca/5-UML/5.\u6D3B\u52A8\u56FE.md", "2024-02-29 18:30:17 ", "2024-03-26 17:46:22 "], ["docs/tech/OOAna&Design_ca/5-UML/6.\u7C7B\u56FE.md", "2024-02-29 18:30:17 ", "2024-03-26 17:46:22 "], ["docs/tech/OOAna&Design_ca/5-UML/7.\u5E8F\u5217\u56FE(\u65F6\u5E8F\u56FE).md", "2024-02-29 18:30:17 ", "2024-02-29 18:30:17 "], ["docs/tech/OOAna&Design_ca/5-UML/8.\u72B6\u6001\u673A\u56FE.md", "2024-02-29 18:30:17 ", "2024-03-26 17:46:22 "], ["docs/tech/OOAna&Design_ca/5-UML/9.\u65F6\u95F4\u56FE.md", "2024-02-29 18:30:17 ", "2024-02-29 18:30:17 "], ["docs/tech/OOAna&Design_ca/5-UML/A.\u5176\u5B83\u56FE.md", "2024-02-29 18:30:17 ", "2024-03-26 17:46:22 "], ["docs/tech/OOAna&Design_ca/6-\u8868\u793A\u6CD5-\u8FC7\u7A0B.md", "2024-03-06 18:29:40 ", "2024-03-26 17:46:22 "], ["docs/tech/OOAna&Design_ca/7-\u5B9E\u6218-\u5F00\u53D1\u8FC7\u7A0B\u8003\u8651\u7684\u8981\u7D20.md", "2024-03-06 14:28:05 ", "2024-03-26 17:46:22 "], ["docs/tech/cpp/qt/\u8BB0\u5F55\u4E00\u6B21qt6-msvc32-static-MT\u7684\u9759\u6001\u7F16\u8BD1.md", "2024-03-28 16:25:58 ", "2024-04-10 22:55:21 "], ["docs/tech/cpp/\u4E00\u6B21clangd\u63D0\u793A\u9519\u8BEF\u7684\u6392\u67E5.md", "2024-04-18 16:25:00 ", "2024-08-15 22:52:01 "], ["docs/tech/db/timescaledb.md", "2024-04-10 22:55:21 ", "2024-04-10 22:55:21 "], ["docs/tech/devops/git_ca/git-profile.md", "2024-07-17 00:03:07 ", "2024-08-15 22:52:01 "], ["docs/tech/devops/git_ca/git\u548Cgithub\u8D26\u53F7\u4E0D\u7EDF\u4E00.md", "2024-07-17 00:03:07 ", "2024-07-17 11:45:17 "], ["docs/tech/devops/git_ca/git\u6700\u4F73\u5B9E\u8DF5.md", "2024-08-15 22:52:01 ", "2024-08-30 09:16:42 "], ["docs/tech/english_ca/grammar/0-\u540D\u8BCD\u77ED\u8BED.md", "2024-06-22 23:23:27 ", "2024-07-17 00:03:07 "], ["docs/tech/english_ca/grammar/1-\u540D\u8BCD.md", "2024-07-19 11:23:23 ", "2024-09-12 10:52:36 "], ["docs/tech/english_ca/grammar/2-\u9650\u5B9A\u8BCD-\u51A0\u8BCD.md", "2024-09-12 10:52:36 ", "2024-09-19 08:58:35 "], ["docs/tech/english_ca/grammar/index.md", "2024-06-22 23:23:27 ", "2024-07-17 00:03:07 "], ["docs/tech/english_ca/readme.md", "2024-06-22 23:23:27 ", "2024-07-17 00:03:07 "], ["docs/tech/fastCoding/kde/kwin\u4F7F\u7528\u6280\u5DE7.md", "2024-02-29 18:30:17 ", "2024-02-29 18:30:17 "], ["docs/tech/fastCoding/vim_ca/vim\u6587\u4EF6\u5185\u79FB\u52A8.md", "2024-06-05 22:49:40 ", "2024-06-05 22:49:40 "], ["docs/tech/fastCoding/vim_ca/vim\u67E5\u627E\u548C\u66FF\u6362.md", "2024-06-05 22:49:40 ", "2024-07-17 00:03:07 "], ["docs/tech/fastCoding/vim_ca/\u6B22\u8FCE\u6765\u5230vim\u5B97\u6559.md", "2023-12-23 15:02:55 ", "2024-08-30 09:16:42 "], ["docs/tech/fastCoding/vim_ca/\u6E10\u8FDB\u5F0F\u5B66\u4E60vim.md", "2023-12-23 15:02:55 ", "2024-09-12 10:52:36 "], ["docs/tech/fastCoding/vscode\u5FEB\u6377\u952E.md", "2024-06-05 22:49:40 ", "2024-09-13 14:00:49 "], ["docs/tech/fastCoding/\u5F00\u53D1\u73AF\u5883\u7EF4\u62A4\u548C\u7BA1\u7406.md", "2024-04-18 16:25:00 ", "2024-05-06 20:44:06 "], ["docs/tech/fastCoding/\u5FEB\u6377\u952Echore.md", "2024-09-13 14:00:49 ", "2024-09-13 14:06:40 "], ["docs/tech/fastCoding/\u7F16\u7A0B\u73AF\u5883-\u63D0\u9AD8\u6548\u7387\u7684\u65B9\u5F0F.md", "2023-12-28 18:26:18 ", "2024-05-06 20:44:06 "], ["docs/tech/linux_kde_suse_ca/0-opensuse_linux\u7D22\u5F15.md", "2024-05-06 20:44:06 ", "2024-05-06 20:44:06 "], ["docs/tech/linux_kde_suse_ca/1-\u5B89\u88C5\u5B8C\u6210qt\u4E4B\u540E\u7F3A\u5C11opengl\u5E93.md", "2024-05-06 20:44:06 ", "2024-05-06 20:44:06 "], ["docs/tech/linux_kde_suse_ca/2-\u4E2D\u6587\u8F93\u5165\u6CD5\u95EE\u9898.md", "2024-05-06 20:44:06 ", "2024-05-06 21:02:15 "], ["docs/tech/linux_kde_suse_ca/3-linux\u5371\u5BB3\u5065\u5EB7.md", "2024-05-06 20:44:06 ", "2024-05-06 20:44:06 "], ["docs/tech/linux_kde_suse_ca/4-\u4F7F\u7528linux\u7684\u6210\u957F\u548C\u4EE3\u4EF7.md", "2024-05-06 20:44:06 ", "2024-05-06 20:44:06 "], ["docs/tech/linux_kde_suse_ca/5-\u7EC8\u6781\u7684zsh.md", "2024-05-06 20:44:06 ", "2024-05-06 20:44:06 "], ["docs/tech/linux_kde_suse_ca/kde_ca/1-kde.md", "2024-05-06 20:44:06 ", "2024-05-06 20:44:06 "], ["docs/tech/project/\u6253\u5370\u7F51\u9875\u7684\u81EA\u52A8\u5316\u5DE5\u5177.md", "2023-10-18 17:13:19 ", "2024-01-01 13:41:18 "], ["docs/tech/ubuntu\u4E00\u6B21\u7F51\u7EDC\u6545\u969C\u6392\u67E5\u8BB0\u5F55.md", "2024-08-19 22:40:57 ", "2024-08-19 22:40:57 "], ["docs/tech/\u4E00\u4E2A\u7CFB\u7EDF\u7EA7\u7A0B\u5E8F\u5458.md", "2024-07-19 11:23:23 ", "2024-07-19 11:23:23 "], ["docs/tech/\u524D\u7AEF/vue\u7684h\u51FD\u6570Vnode\u548Crender.md", "2024-06-07 22:35:04 ", "2024-06-08 00:12:49 "], ["docs/tech/\u5EFA\u4E00\u4E2Ablog\u7F51\u7AD9.md", "2023-11-06 15:43:15 ", "2024-06-07 13:23:53 "], ["docs/tech/\u6280\u672F\u5EFA\u8BBE.md", "2023-11-06 15:43:15 ", "2023-11-15 22:31:03 "], ["docs/tech/\u6280\u672F\u6587\u7AE0\u5F15\u7528/Iot\u6570\u636E\u4F20\u8F93\u534F\u8BAE.md", "2023-11-06 15:43:15 ", "2023-11-10 22:15:26 "], ["docs/tech/\u6280\u672F\u6587\u7AE0\u5F15\u7528/wsl\u548Chost\u4E3B\u673A\u4E4B\u95F4\u7684\u7F51\u7EDC.md", "2023-11-06 15:43:15 ", "2023-11-10 22:15:26 "], ["docs/tech/\u6570\u636E\u7ED3\u6784&\u7B97\u6CD5_ca/0-\u6570\u636E\u7ED3\u6784\u4E0E\u7B97\u6CD5\u7B80\u4ECB.md", "2023-10-27 10:50:53 ", "2023-10-27 22:19:24 "], ["docs/tech/\u6570\u636E\u7ED3\u6784&\u7B97\u6CD5_ca/1-\u65F6\u95F4&\u7A7A\u95F4\u590D\u6742\u5EA6.md", "2023-10-18 17:13:19 ", "2023-11-10 22:15:26 "], ["docs/tech/\u8D44\u6E90\u6536\u5F55.md", "2023-11-10 22:15:26 ", "2023-11-10 22:15:26 "], ["docs/tech/\u9762\u5411\u4E1A\u52A1\u7684\u5B8C\u5907\u751F\u4EA7\u529B/(\u76F4\u9762\u4E1A\u52A1)1-\u6280\u672F\u9009\u578B.md", "2023-11-10 22:15:26 ", "2023-11-10 22:15:26 "], ["docs/tech/\u9762\u5411\u4E1A\u52A1\u7684\u5B8C\u5907\u751F\u4EA7\u529B/\u8C08\u8C08csharp.md", "2024-02-18 08:54:33 ", "2024-05-06 21:02:15 "], ["history.md", "2023-10-27 23:30:00 ", "2024-05-16 11:31:54 "], ["index.md", "2023-07-21 15:10:50 ", "2024-09-24 22:12:03 "], ["navigation.md", "2024-06-27 14:32:59 ", "2024-06-28 13:20:46 "], ["readme.md", "2023-10-18 17:13:19 ", "2024-09-19 13:49:16 "]];

// .vitepress/utils.js
function filterDocsSideBar(item) {
  let beforItems = item;
  let afterItems = {};
  for (const key in beforItems) {
    filterDocsSideBarWork(beforItems[key][0].items, afterItems, `/docs${key}`);
  }
  return afterItems;
}
function filterDocsSideBarWork(beforItems, willInsertItems, prefix) {
  for (let i = 0; i < beforItems.length; ++i) {
    if (beforItems[i].items) {
      var nprefix = prefix + beforItems[i].text + "/";
      if (beforItems[i].text.includes("_ca")) {
        beforItems[i].text = beforItems[i].text.replace("_ca", "");
        willInsertItems[nprefix] = [beforItems[i]];
      } else {
        filterDocsSideBarWork(beforItems[i].items, willInsertItems, nprefix);
      }
    }
  }
}
async function getPosts() {
  let paths = await getPostMDFilePaths();
  let posts = await Promise.all(
    paths.map(async (item) => {
      const content = await fs.readFile(item, "utf-8");
      const state = fs.statSync(item);
      let despMatch = content.match(/:::\s*info\s*Introduction(?:.|\n)*?:::/);
      let desp = "";
      if (despMatch) {
        desp = despMatch[0].replace(/:::\s*info\s*Introduction/, "").replace(":::", "");
      }
      const { data } = matter(content);
      data.desp = desp;
      const time = getFilesTime(item);
      data.birthtime = time[0];
      data.mtime = time[1];
      if (!data.title) {
        let ar = item.split("/");
        data.title = ar[ar.length - 1].replace(".md", "");
      }
      return {
        frontMatter: data,
        regularPath: `/${item.replace(".md", ".html")}`
      };
    })
  );
  posts.sort(_compareDate);
  for (var j = 0; j < posts.length; j++) {
    posts[j].id = j;
  }
  return posts;
}
function getFilesTime(fileName) {
  for (const file of filesTime_default) {
    if (file[0] == fileName) {
      return [file[1], file[2]];
    }
  }
  return ["", ""];
}
function _compareDate(obj1, obj2) {
  return new Date(obj1.frontMatter.birthtime) < new Date(obj2.frontMatter.birthtime) ? 1 : -1;
}
async function getPostMDFilePaths() {
  let paths = await globby(["**.md"], {
    ignore: ["node_modules", "README.md"]
  });
  return paths.filter((item) => item.includes("docs/"));
}

// .vitepress/config.js
import MarkdownItDiagrams from "file:///home/zerlei/git/me/node_modules/markdown-it-diagram/dist/index.mjs";
import markdownFootnote from "file:///home/zerlei/git/me/node_modules/markdown-it-footnote/index.mjs";

// .vitepress/theme/lib/deflate.js
var zip_WSIZE = 32768;
var zip_OUTBUFSIZ = 1024 * 8;
var zip_window_size = 2 * zip_WSIZE;
var zip_MIN_MATCH = 3;
var zip_MAX_MATCH = 258;
var zip_HASH_BITS = 13;
var zip_HASH_SIZE = 1 << zip_HASH_BITS;
var zip_HASH_MASK = zip_HASH_SIZE - 1;
var zip_WMASK = zip_WSIZE - 1;
var zip_MIN_LOOKAHEAD = zip_MAX_MATCH + zip_MIN_MATCH + 1;
var zip_MAX_DIST = zip_WSIZE - zip_MIN_LOOKAHEAD;
var zip_LENGTH_CODES = 29;
var zip_LITERALS = 256;
var zip_L_CODES = zip_LITERALS + 1 + zip_LENGTH_CODES;
var zip_HEAP_SIZE = 2 * zip_L_CODES + 1;
var zip_H_SHIFT = parseInt((zip_HASH_BITS + zip_MIN_MATCH - 1) / zip_MIN_MATCH);
var zip_extra_lbits = new Array(0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0);
var zip_extra_dbits = new Array(0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13);
var zip_extra_blbits = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7);
var zip_bl_order = new Array(16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15);
var zip_configuration_table = new Array(
  new zip_DeflateConfiguration(0, 0, 0, 0),
  new zip_DeflateConfiguration(4, 4, 8, 4),
  new zip_DeflateConfiguration(4, 5, 16, 8),
  new zip_DeflateConfiguration(4, 6, 32, 32),
  new zip_DeflateConfiguration(4, 4, 16, 16),
  new zip_DeflateConfiguration(8, 16, 32, 32),
  new zip_DeflateConfiguration(8, 16, 128, 128),
  new zip_DeflateConfiguration(8, 32, 128, 256),
  new zip_DeflateConfiguration(32, 128, 258, 1024),
  new zip_DeflateConfiguration(32, 258, 258, 4096)
);
function zip_DeflateConfiguration(a, b, c, d) {
  this.good_length = a;
  this.max_lazy = b;
  this.nice_length = c;
  this.max_chain = d;
}

// .vitepress/config.js
import { withMermaid } from "file:///home/zerlei/git/me/node_modules/vitepress-plugin-mermaid/dist/vitepress-plugin-mermaid.es.mjs";
var config_default = withMermaid({
  head: [["link", { rel: "icon", href: "/zerlei.svg" }]],
  title: "Zerlei",
  lang: "zh-cn",
  description: "\u{1F308}A programmer,there are his blogs\u{1F308}",
  themeConfig: {
    // logo:'../asserts/zerlei.svg',
    // https://vitepress.dev/reference/default-theme-config
    nav: [
      { text: "home", link: "/" },
      { text: "blogs", link: "/blog" },
      { text: "navigation", link: "/navigation" },
      { text: "projects", link: "/project" }
    ],
    // search: {
    //   provider: "local",
    // },
    posts: await getPosts(),
    sidebar: [],
    // footer: {
    //   copyright:
    //     "Copyright © 2019-present Evan You  🫲 等我 有域名，我就换掉有语系",
    // },
    socialLinks: [{ icon: "github", link: "https://github.com/ZhaoYouYa/me/issues" }],
    outline: "deep"
  },
  vite: {
    plugins: [
      // add plugin
      AutoSidebar({
        path: "/docs/",
        collapsed: true,
        sideBarResolved: (data) => {
          let d = filterDocsSideBar(data);
          return d;
        },
        sideBarItemsResolved(data) {
          data = data.filter((item) => {
            for (let word of [".png", ".jpg", ".jpeg", ".gif", ".svg"]) {
              if (item.text.includes(word)) {
                return false;
              }
            }
            if (item.link) {
              item.link = `/docs${item.link}`;
            }
            return true;
          });
          return data;
        }
        // You can also set options to adjust sidebar data
        // see option document below
      })
      // htmlImport()
    ],
    server: {
      host: "0.0.0.0",
      port: 6769
    }
  },
  markdown: {
    config: (md) => {
      md.use(markdownFootnote);
    }
  }
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
